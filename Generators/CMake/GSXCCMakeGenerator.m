// Released under the terms of LGPL 2.1, Please see COPYING.LIB

#import "GSXCCMakeGenerator.h"
#import "PBXNativeTarget.h"
#import "XCConfigurationList.h"
#import "PBXBuildFile.h"
#import "PBXFileReference.h"

@implementation GSXCCMakeGenerator

- (instancetype) init
{
  self = [super init];

  if (self != nil)
    {
      _append = NO;
    }
  
  return self;
}

- (NSString *) cmakePreamble: (NSString *)appName
{
  NSString *output = @"";
  NSString *header = [NSString stringWithFormat: @"## CMake Generated by buildtool - %@\n\n", appName];
  NSString *project = [NSString stringWithFormat: @"project(%@ C CXX)\n", appName];
  
  output = [output stringByAppendingString: header];
  output = [output stringByAppendingString: @"## Begin header\n"];
  output = [output stringByAppendingString: @"cmake_minimum_required(VERSION 3.13)\n"];
  output = [output stringByAppendingString: @"set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n"];
  output = [output stringByAppendingString: @"set(CMAKE_CXX_STANDARD 11)\n"];
  output = [output stringByAppendingString: @"set(CMAKE_C_COMPILER \"clang\")\n"]; // These should be set dynamically...
  output = [output stringByAppendingString: @"set(CMAKE_CXX_COMPILER \"clang++\")\n"]; // So should this one...
  output = [output stringByAppendingString: project];
  output = [output stringByAppendingString: @"set(BUILD_FOLDER_NAME \"build\")\n"];
  output = [output stringByAppendingString: @"set(CMAKE_SOURCE_DIR \".\")\n"];
  output = [output stringByAppendingString: @"## end header\n\n"];

  return output;
}

- (NSString *) cmakeSourceFiles: (NSArray *)array
{
  NSString *output = @"";
  NSEnumerator *en = [array objectEnumerator];
  NSString *file = nil;
  
  if ([array count] > 0)
    {
      output = [output stringByAppendingString: @"# Begin sources\n"];

      if (_append == NO)
	{
	  output = [output stringByAppendingString: @"set (SOURCES\n"];
	  _append = YES;
	}
      else
	{
	  output = [output stringByAppendingString: @"list (APPEND SOURCES\n"];
	}
    }
  
  while((file = [en nextObject]) != nil)
    {
      output = [output stringByAppendingString: [NSString stringWithFormat: @"  $(CMAKE_SOURCE_DIR)/%@\n", file]];
    }

  if ([array count] > 0)
    {
      output = [output stringByAppendingString: @")\n"];
      output = [output stringByAppendingString: @"# End sources\n\n"];
    }
  
  return output;
}

- (BOOL) generate
{
  BOOL result = YES;
  GSXCBuildContext *context = [GSXCBuildContext sharedBuildContext];
  NSString *name = [_target name];
  NSString *appName = [name stringByDeletingPathExtension];
  NSString *outputName = @"CMakeLists.txt";
  NSString *outputString = @"";
  //NSString *headerFilesString = [self _arrayToList: [context objectForKey: @"HEADERS"]];
  // NSString *objCFilesString = [self _arrayToList: [context objectForKey: @"OBJC_FILES"]];
  // NSString *cFilesString = [self _arrayToList: [context objectForKey: @"C_FILES"]];
  // NSString *cppFilesString = [self _arrayToList: [context objectForKey: @"CPP_FILES"]];
  // NSString *objCPPFilesString = [self _arrayToList: [context objectForKey: @"OBJCPP_FILES"]];  
  // NSString *resourceFilesString = [self _arrayToList: [context objectForKey: @"RESOURCES"]];
  // NSString *additionalIncludes = [self _arrayToIncludeList: [context objectForKey: @"ADDITIONAL_INCLUDE_DIRS"]];
  // NSString *additionalOCflags = [self _arrayToLinkList: [context objectForKey: @"ADDITIONAL_OBJC_LIBS"]];
  NSString *projectType = [context objectForKey: @"PROJECT_TYPE"];

  // Construct the makefile out of the data we have thusfar collected.
  xcputs("\t* Generating CMakeLists.txt...");

  // Sometimes the build will generate all of the target makefiles in one place, depending on the version of
  // Xcode the project was created with.
  if([[NSFileManager defaultManager] fileExistsAtPath: @"CMakeLists.txt"])
    {
      // if it collides with the existing name, add the target name...
      outputName = [outputName stringByAppendingString: [NSString stringWithFormat: @"_%@.txt", appName]];
    }

  outputString = [self cmakePreamble: appName];
  outputString = [outputString stringByAppendingString:
                                [self cmakeSourceFiles: [context objectForKey: @"OBJC_FILES"]]];
  outputString = [outputString stringByAppendingString:
                                [self cmakeSourceFiles: [context objectForKey: @"C_FILES"]]];
  outputString = [outputString stringByAppendingString:
                                [self cmakeSourceFiles: [context objectForKey: @"CPP_FILES"]]];
  outputString = [outputString stringByAppendingString:
                                [self cmakeSourceFiles: [context objectForKey: @"OBJCPP_FILES"]]];


  NSDebugLog(@"output = %@", outputString);
  [outputString writeToFile: outputName atomically: YES];
  xcputs([[NSString stringWithFormat: @"=== Completed generation for target %@", name] cString]);

  return result; 
}

@end
